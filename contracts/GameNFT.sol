// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";

contract GameNFT is ERC721, AccessControlEnumerable, ERC721Enumerable, Ownable {
    mapping(address => bool) public approvalWhitelists;
    mapping(uint256 => bool) public movedToGames;
    string private _baseTokenURI;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        address factory
    ) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, factory);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 tokenId) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "GameNFT: must have minter role to mint"
        );
        require(!_exists(tokenId), "GameNFT: must have unique tokenId");
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, tokenId);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator)
        public
        view
        override
        returns (bool)
    {
        if (approvalWhitelists[operator] == true) {
            return true;
        }

        return super.isApprovedForAll(owner, operator);
    }

    /**
     * @dev Allow operation to reduce gas fee.
     */
    function addApprovalWhitelist(address proxy) public onlyOwner {
        require(
            approvalWhitelists[proxy] == false,
            "GameNFT: invalid proxy address"
        );

        approvalWhitelists[proxy] = true;
    }

    /**
     * @dev Remove operation from approval list.
     */
    function removeApprovalWhitelist(address proxy) public onlyOwner {
        approvalWhitelists[proxy] = false;
    }

    /**
     * @dev Lock token to play.
     */
    function lockTokenToPlay(uint256 tokenId) external {
        require(
            super.ownerOf(tokenId) == _msgSender(),
            "GameNFT: you are not the owner of this token"
        );
        require(
            !movedToGames[tokenId],
            "GameNFT: this token has been locked already"
        );
        movedToGames[tokenId] = true;
    }

    /**
     * @dev Stop ppaying to unlock token.
     */
    function unlockTokenFromGame(uint256 tokenId, address owner)
        public
        onlyOwner
    {
        require(
            super.ownerOf(tokenId) == owner,
            "GameNFT: you are not the owner of this token"
        );
        require(movedToGames[tokenId], "GameNFT: this token is not locked");
        movedToGames[tokenId] = false;
    }

    /**
     * @dev Check lock status.
     */
    function canTransferToken(uint256 tokenId) external view returns (bool) {
        return movedToGames[tokenId] == false;
    }

    /**
     * @dev See {IERC165-_beforeTokenTransfer}.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable) {
        require(
            !movedToGames[tokenId],
            "GameNFT: your item has locked to play in game"
        );
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
